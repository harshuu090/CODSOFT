import { useState, useCallback } from "react";
import CalculatorButton from "./CalculatorButton";

const Calculator = () => {
  const [display, setDisplay] = useState("0");
  const [previousValue, setPreviousValue] = useState<number | null>(null);
  const [operation, setOperation] = useState<string | null>(null);
  const [waitingForNext, setWaitingForNext] = useState(false);

  const inputNumber = useCallback((num: string) => {
    if (waitingForNext) {
      setDisplay(num);
      setWaitingForNext(false);
    } else {
      setDisplay(display === "0" ? num : display + num);
    }
  }, [display, waitingForNext]);

  const inputOperator = useCallback((nextOperator: string) => {
    const inputValue = parseFloat(display);

    if (previousValue === null) {
      setPreviousValue(inputValue);
    } else if (operation) {
      const currentValue = previousValue || 0;
      let result = 0;

      // Using if-else statements for calculations
      if (operation === "+") {
        result = currentValue + inputValue;
      } else if (operation === "–") {
        result = currentValue - inputValue;
      } else if (operation === "×") {
        result = currentValue * inputValue;
      } else if (operation === "÷") {
        result = inputValue !== 0 ? currentValue / inputValue : 0;
      }

      setDisplay(String(result));
      setPreviousValue(result);
    }

    setWaitingForNext(true);
    setOperation(nextOperator);
  }, [display, previousValue, operation]);

  const calculate = useCallback(() => {
    const inputValue = parseFloat(display);

    if (previousValue !== null && operation) {
      const currentValue = previousValue;
      let result = 0;

      // Using if-else statements for final calculation
      if (operation === "+") {
        result = currentValue + inputValue;
      } else if (operation === "–") {
        result = currentValue - inputValue;
      } else if (operation === "×") {
        result = currentValue * inputValue;
      } else if (operation === "÷") {
        result = inputValue !== 0 ? currentValue / inputValue : 0;
      }

      setDisplay(String(result));
      setPreviousValue(null);
      setOperation(null);
      setWaitingForNext(true);
    }
  }, [display, previousValue, operation]);

  const clear = useCallback(() => {
    setDisplay("0");
    setPreviousValue(null);
    setOperation(null);
    setWaitingForNext(false);
  }, []);

  const inputDecimal = useCallback(() => {
    if (waitingForNext) {
      setDisplay("0.");
      setWaitingForNext(false);
    } else if (display.indexOf(".") === -1) {
      setDisplay(display + ".");
    }
  }, [display, waitingForNext]);

  // Button configuration using loops
  const numberButtons = [];
  for (let i = 9; i >= 0; i--) {
    numberButtons.push(
      <CalculatorButton
        key={i}
        onClick={() => inputNumber(String(i))}
        className={i === 0 ? "col-span-2" : ""}
        variant="number"
      >
        {i}
      </CalculatorButton>
    );
  }

  const operatorButtons = [
    { symbol: "÷", action: () => inputOperator("÷") },
    { symbol: "×", action: () => inputOperator("×") },
    { symbol: "–", action: () => inputOperator("–") },
    { symbol: "+", action: () => inputOperator("+") },
  ];

  return (
    <div className="bg-card shadow-2xl rounded-3xl p-6 w-full max-w-sm mx-auto border border-border">
      <div className="mb-6">
        <div className="bg-muted rounded-2xl p-6 min-h-[80px] flex items-center justify-end">
          <div className="text-right">
            <div className="text-4xl font-light text-foreground break-all">
              {display}
            </div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-4 gap-3">
        {/* Row 1: Clear and operators */}
        <CalculatorButton onClick={clear} className="col-span-2" variant="clear">
          Clear
        </CalculatorButton>
        <CalculatorButton onClick={() => inputOperator("÷")} variant="operator">
          ÷
        </CalculatorButton>
        <CalculatorButton onClick={() => inputOperator("×")} variant="operator">
          ×
        </CalculatorButton>

        {/* Row 2: Numbers 7-9 and subtract */}
        <CalculatorButton onClick={() => inputNumber("7")} variant="number">
          7
        </CalculatorButton>
        <CalculatorButton onClick={() => inputNumber("8")} variant="number">
          8
        </CalculatorButton>
        <CalculatorButton onClick={() => inputNumber("9")} variant="number">
          9
        </CalculatorButton>
        <CalculatorButton onClick={() => inputOperator("–")} variant="operator">
          –
        </CalculatorButton>

        {/* Row 3: Numbers 4-6 and add */}
        <CalculatorButton onClick={() => inputNumber("4")} variant="number">
          4
        </CalculatorButton>
        <CalculatorButton onClick={() => inputNumber("5")} variant="number">
          5
        </CalculatorButton>
        <CalculatorButton onClick={() => inputNumber("6")} variant="number">
          6
        </CalculatorButton>
        <CalculatorButton onClick={() => inputOperator("+")} variant="operator">
          +
        </CalculatorButton>

        {/* Row 4: Numbers 1-3 and equals (spans 2 rows) */}
        <CalculatorButton onClick={() => inputNumber("1")} variant="number">
          1
        </CalculatorButton>
        <CalculatorButton onClick={() => inputNumber("2")} variant="number">
          2
        </CalculatorButton>
        <CalculatorButton onClick={() => inputNumber("3")} variant="number">
          3
        </CalculatorButton>
        <CalculatorButton onClick={calculate} className="row-span-2" variant="equals">
          =
        </CalculatorButton>

        {/* Row 5: 0, decimal */}
        <CalculatorButton onClick={() => inputNumber("0")} className="col-span-2" variant="number">
          0
        </CalculatorButton>
        <CalculatorButton onClick={inputDecimal} variant="number">
          .
        </CalculatorButton>
      </div>
    </div>
  );
};

export default Calculator;
